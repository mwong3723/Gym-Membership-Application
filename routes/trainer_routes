from flask import Blueprint, render_template, request, redirect, url_for, session
from models.tables import get_db_connection

trainer_bp = Blueprint("trainer", __name__)

# ---------------------------------------------------------------------
# Add-Trainer Route (optional)
# If you prefer to add trainers manually (e.g., with psql), you can remove this.
# ---------------------------------------------------------------------
@app.route("/add_trainer", methods=["GET", "POST"])
def add_trainer():
    # Optionally, only allow access if logged in as admin, etc.
    # if "user_email" not in session or not is_admin(session["user_email"]):
    #     return redirect(url_for("login"))

    if request.method == "POST":
        name = request.form.get("name")
        expertise = request.form.get("expertise")
        availability = request.form.get("availability")
        bio = request.form.get("bio")

        try:
            conn = psy.connect(host=hostname, dbname=database, user=username, password=pwd, port=port_id)
            cur = conn.cursor()
            cur.execute('''
                INSERT INTO TRAINER (name, expertise, availability, bio)
                VALUES (%s, %s, %s, %s)
            ''', (name, expertise, availability, bio))
            conn.commit()
            cur.close()
            conn.close()
            return redirect(url_for("trainer_list"))
        except Exception as e:
            return f"Error inserting trainer: {e}"

    return render_template("add_trainer.html")


# ---------------------------------------------------------------------
# Trainer Routes (DB-based)
# ---------------------------------------------------------------------
@app.route("/trainers")
def trainer_list():
    if "user_email" not in session:
        return redirect(url_for("login"))

    try:
        conn = psy.connect(
            host=hostname, 
            dbname=database, 
            user=username, 
            password=pwd, 
            port=port_id
        )
        cur = conn.cursor()
        
        # If your table is quoted uppercase, do this:
        cur.execute('SELECT trainer_id, name, expertise, availability, bio FROM "TRAINER";')
        
        rows = cur.fetchall()
        cur.close()
        conn.close()

        # Convert each row to a dict
        trainers = []
        for row in rows:
            trainers.append({
                "trainer_id": row[0],
                "name": row[1],
                "expertise": row[2],
                "availability": row[3],
                "bio": row[4]
            })

        return render_template("trainers.html", trainers=trainers)
    except Exception as e:
        return f"Error fetching trainers: {e}"



@app.route("/trainer/<int:trainer_id>")
def trainer_detail(trainer_id):
    """
    Displays a single trainer's info from the TRAINER table.
    """
    if "user_email" not in session:
        return redirect(url_for("login"))

    try:
        conn = psy.connect(host=hostname, dbname=database, user=username, password=pwd, port=port_id)
        cur = conn.cursor()
        cur.execute("SELECT trainer_id, name, expertise, availability, bio FROM TRAINER WHERE trainer_id = %s;", (trainer_id,))
        row = cur.fetchone()
        cur.close()
        conn.close()

        if row is None:
            return "Trainer not found", 404

        trainer = {
            "trainer_id": row[0],
            "name": row[1],
            "expertise": row[2],
            "availability": row[3],
            "bio": row[4]
        }
        return render_template("trainer_detail.html", trainer=trainer)
    except Exception as e:
        return f"Error fetching trainer detail: {e}"
